import machine
from machine import Pin, SPI
from sdcard import SDCard
import os
import time
from ili9341 import ILI9341

import bluetooth
from micropython import const

# Definições de pinos
TFT_CS = const(15)
TFT_DC = const(2)
SD_CS = const(5)

# Inicialização do SPI para o display TFT
spi = SPI(2, baudrate=20000000, sck=Pin(14), mosi=Pin(13))
display = ILI9341(spi, cs=Pin(TFT_CS), dc=Pin(TFT_DC), rst=Pin(-1))
spi2 = SPI(1, baudrate=20000000, sck=Pin(18), mosi=Pin(23), miso=Pin(19))

# Função para inicializar o cartão SD e montar o sistema de arquivos
def init_sd():
    try:
        sd = SDCard(spi2, Pin(SD_CS))
        vfs = os.VfsFat(sd)
        os.mount(vfs, "/sd")
        return vfs
    except Exception as e:
        print("Erro ao inicializar o cartão SD:", e)
        return None

# Inicialização do cartão SD
sd = init_sd()

# Configuração do Bluetooth
ble = bluetooth.BLE()
ble.active(True)

# Definição do nome do dispositivo BLE
ble.config(name='ESP32_cla_test0')

# Serviço e Característica BLE
SERVICE_UUID = bluetooth.UUID('0000180A-0000-1000-8000-00805F9B34FB')
CHARACTERISTIC_UUID = bluetooth.UUID('00002A7E-0000-1000-8000-00805F9B34FB')
command_char = (CHARACTERISTIC_UUID, bluetooth.FLAG_WRITE)

# Função para exibir imagem do cartão SD no display
def display_image(image_path):
    try:
        with open(image_path, 'rb') as f:
            img_data = f.read()
            display.fill(ILI9341.BLACK)  # Limpa a tela
            display.image(0, 0, img_data)
            display.show()
        return True
    except OSError as e:
        print("Erro ao abrir arquivo:", e)
        return False

# Função para listar imagens no cartão SD
def list_images():
    try:
        return [f for f in os.listdir('/sd') if f.endswith('.jpg') or f.endswith('.png')]
    except OSError as e:
        print("Erro ao listar arquivos:", e)
        return []

# Callback para tratamento de escrita na característica BLE
def on_command_received(event):
    value = event.data
    try:
        command = value.decode('utf-8')
        if command.startswith('DI:'):
            image_name = command.split(':')[1]
            image_path = f'/sd/{image_name}'
            if display_image(image_path):
                print(f"Imagem {image_name} exibida no display.")
                ble.gatts_notify(0, command_char, b"OK: Imagem exibida")
            else:
                print(f"Falha ao exibir imagem {image_name} no display.")
                ble.gatts_notify(0, command_char, b"ERROR: Falha ao exibir imagem")
        elif command == 'LI':
            images = list_images()
            images_str = ','.join(images)
            ble.gatts_notify(0, command_char, images_str.encode('utf-8'))
    except Exception as e:
        print("Erro ao processar comando:", e)
        ble.gatts_notify(0, command_char, b"ERROR: Falha ao processar comando")

# Configuração do serviço BLE
ble.config(rxbuf=1024)
srv = ble.gatts_register_services(((SERVICE_UUID, (command_char,)),))
ble.gatts_set_buffer(command_char, 100)
ble.gatts_write(command_char, b'command')

# Função de interrupção para eventos BLE
def ble_irq(event, data):
    if event == 2:  # Evento de escrita
        on_command_received(data)

ble.irq(handler=ble_irq)

print("Aguardando conexão BLE...")

# Loop principal
while True:
    if ble.connections():
        print("Cliente conectado via BLE!")
        time.sleep(1)
    else:
        print("Esperando conexão...")
        time.sleep(1)
